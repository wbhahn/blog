{
  "hash": "b3179b7b03d6165ba713ba180b36779d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"quarto 의 기초\"\ndescription: |\n   YAML Header, 마크다운(Markdown) 텍스트, R 코드 청크(chunk) 그리고 그림과 테이블을 중심으로, R 코드와 분석 결과가 포함된 문서를 작성하는 방법을 정리하였습니다.\nauthor: \n  name: YuJeong Yoon\n  url: https://github.com/dbwjd12\ndate: \"03-13-2025\"\nimage: logo.png\nformat: \n  html: \n    toc-depth: 3\n    toc-expand: true\n    toc-location: left\n    toc-title: \"Quarto 알아보기\"\n    message: false\n    warning: false\n\n\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n[**Quarto**](https://quarto.org/)**를 이용해** [**R**](#0) 코드와 분석 결과가 포함된 문서를 작성하는 방법을 강의할 예정입니다. 강의 내용을 미리 공유합니다.\n\n## 시작하기 전에\n\n\n![Quarto](https://bioinformatics.ccr.cancer.gov/docs/btep-coding-club/CC2024/Quarto/images/quarto_process.png)[^14]\n\n[**Quarto**](https://quarto.org/)**는 Markdown을 기반으로 한 문서 작성 도구로,** [Python](https://quarto.org/docs/computations/python.html), [**R**](#0) , [Julia](https://quarto.org/docs/computations/julia.html), and [Observable](https://quarto.org/docs/computations/ojs.html) 등 다양한 언어로 코드실행, 분석, 시각화를 포함한 컨텐츠를 만드는 툴이며 크게 3가지 활용법이 있다.\n\n1.  문서(`pdf`, `html`, `docx`): 글쓰기, 분석 결과, 참고문헌 등 논문의 모든 작업을 [**Quarto**](https://quarto.org/)으로 수행한다.\n\n2.  프리젠테이션(`pdf`, `html`, `pptx`): [**R**](https://www.r-project.org/) 코드나 분석결과가 포함된 프리젠테이션을 만든다. [기본 템플릿](https://rmarkdown.rstudio.com/lesson-11.html)[^1] 외에 [**xaringan**](https://github.com/yihui/xaringan)[^2] 패키지가 최근 인기를 끌고 있다.\n\n3.  웹(`html`): 웹사이트나 블로그를 만든다. [**blogdown**](https://github.com/rstudio/blogdown)[^3] 이나 [**distill**](https://rstudio.github.io/distill/)[^4] 패키지가 대표적이다. 이 글의 블로그도 [**distill**](https://rstudio.github.io/distill/)로 만들었으며, 과거 차라투 홈페이지는 [**blogdown**](https://github.com/rstudio/blogdown)을 이용하였다.\n\n\n\n[^1]: https://rmarkdown.rstudio.com/lesson-11.html\n\n[^2]: https://github.com/yihui/xaringan\n\n[^3]: https://github.com/rstudio/blogdown\n\n[^4]: https://rstudio.github.io/distill/\n\n본 강의는 1의 가장 기초에 해당하는 강의로 간단한 문서를 작성하는 것을 목표로 한다. `pdf` 문서를 만들기 위해서는 추가로 [**LaTeX**](https://www.latex-project.org/) 문서작성 프로그램인 [**Tex Live**](http://www.ktug.org/xe/?mid=Install)를 설치해야 하며 본 강의에서는 생략한다.\n\n## .qmd 문서 시작하기\n\n[**Quarto**](https://quarto.org/)는 **qmd** 파일로 작성되며 [**Quarto**](https://github.com/quarto-dev/quarto-r)[^5] 패키지를 설치한 후, [**Rstudio**](https://www.rstudio.com/)에서 **File** $\\rightarrow$ New File $\\rightarrow$ Quarto Document... 의 순서로 클릭하여 시작할 수 있다.\n\n[^5]: https://github.com/quarto-dev/quarto-r\n\n![Rstudio File 메뉴](https://user-images.githubusercontent.com/31009952/163181083-9fc6e19a-dcc4-44d3-97cb-9c9a7bf2bcbe.png) Rstudio File 메뉴[^6]\n\n[^6]: https://github.com/rstudio/rstudio/issues/10966\n\n![Quarto 시작 메뉴](https://quarto.org/docs/tools/images/new-quarto-doc.png) Quarto 시작 메뉴[^7]\n\n[^7]: https://github.com/quarto-dev/quarto-r\n\n문서의 제목과 저자 이름을 적은 후 파일 형태를 아무거나 고르면(나중에도 쉽게 수정 가능)확장자가 `qmd`인 문서가 생성될 것이다.\n\n다음은 각각 `html`, `pdf`, `docx`로 생성된 문서이다.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![html 문서](html.png){width=271}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![pdf 문서](pdf.png){width=366}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![word 문서](docx.png){width=365}\n:::\n:::\n\n\n\n생각보다 간단하지 않은가? 이제 본격적으로 `qmd` 파일의 내용을 살펴보면서 어떻게 글과 코드를 작성하는지 알아보자. `qmd`는 크게 제목을 적는 **YAML Header**, 글을 쓰는 **Markdown Text**와 코드를 적는 **Code Chunk**로 나눌 수 있다.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![qmd 구성 예시](qmd.png){width=685}\n:::\n:::\n\n\n\n\n## YAML Header\n\n`YAML`은 **Y**AML **A**in’t **M**arkup **L**anguage의 재귀형식의 이름을 갖고 있는 언어로 가독성에 초점을 두고 개발되었다. [**Quarto**](https://quarto.org/)은 `qmd`의 시작 부분에 문서 형식을 설정하는 용도로 이 포맷을 이용한다. 다음은 기초 정보만 포함된 `YAML`이다.\n\n``` yaml\n---\ntitle: \"My Document\"\nformat:\n  html:\n    toc: true\n    number-sections: true\n    css: styles.css\n---\n```\n\n`YAML` 에 기본적으로 title, author, date 등을 작성할 수 있고, format을 통해 출력 형식 (e.g html, pdf, docx...) 과 각 형식에 맞는 다양한 옵션을 설정하여 문서를 꾸밀 수 있다. Table of Contents, Layout, Fonts 등 다양한 옵션의 설정이 가능하고, 여기서는 Toc 옵션에 대해 살펴볼 것이다. 자세한 format option은 [Quarto reference](https://quarto.org/docs/reference/formats/html.html#figures)를 참고하기 바란다.\n\n### toc\n\nQuarto 문서(.qmd)에서 ##을 사용해 제목을 작성하면, 자동으로 목차(TOC)에 포함된다. 하위 목차를 추가하려면 ###, ####처럼 #의 개수를 늘려 계층 구조를 만들 수 있다.\n\n`toc` 옵션에는 toc-depth, toc-location, toc-title, toc-expand 가 있다. 이 문서의 yaml 부분의 toc 옵션을 살펴보면 다음과 같이 설정되어있다.\n\n```         \n---\ntitle: \"quarto 의 기초\"\nauthor: .\neditor: visual\nformat: \n  html: \n    toc-depth: 3\n    toc-expand: true\n    toc-location: left\n    toc-title: \"Quarto 알아보기\"\n---\n```\n\n\n## Markdown 글쓰기\n\nMarkdown 은 이름에서 알 수 있듯이 [**마크다운(Markdown)**](https://gist.github.com/ihoneymon/652be052a0727ad59601) 을 기반으로 만들어졌다. [**마크다운**](https://gist.github.com/ihoneymon/652be052a0727ad59601)은 문법이 매우 간단한 것이 특징으로 [**깃허브**](https://github.com)의 **`README.md`**가 대표적인 마크다운 문서이다. Quarto 는 Pandoc markdown 을 바탕으로 하며, [quarto guide](https://quarto.org/docs/authoring/markdown-basics.html)[^8]에 흔히 쓰는 문법이 정리되어 있다.\n\n[^8]: https://quarto.org/docs/authoring/markdown-basics.html\n\n2 가지만 따로 살펴보겠다.\n\n### Inline R code\n\n\n\n::: {.cell}\n\n:::\n\n\n\n문장 안에 분석 결과값을 적을 때, 분석이 바뀔 때마다 바뀐 숫자를 직접 수정해야 한다. 그러나 숫자 대신 `` `r <코드>` `` 꼴로 [**R**](https://www.r-project.org/) 코드를 넣는다면 재분석시 그 숫자를 자동으로 업데이트 시킬 수 있다.\n\n``` rmd\nThere were  `r nrow(cars)` cars studied\n```\n\n> There were 50 cars studied\n\n### 수식\n\n[**LaTeX**](https://www.latex-project.org/) 문법을 사용하며 `hwp` 문서의 수식 편집과 비슷하다. inline 삽입은 `$...$`, 새로운 줄은 `$$...$$` 안에 식을 적으면 된다.\n\n``` rmd\nThis summation expression $\\sum_{i=1}^n X_i$ appears inline.\n```\n\n> This summation expression $\\sum_{i=1}^n X_i$ appears inline.\n\n```         \n$$\n\\sigma = \\sqrt{ \\frac{1}{N} \\sum_{i=1}^N (x_i -\\mu)^2}\n$$\n```\n\n$$\\sigma = \\sqrt{ \\frac{1}{N} \\sum_{i=1}^N (x_i -\\mu)^2}$$\n\n수식 전반은 [LaTeX math and equations](https://www.latex-tutorial.com/tutorials/amsmath/)[^9]을 참고하기 바란다.\n\n[^9]: https://www.latex-tutorial.com/tutorials/amsmath/\n\n## R chunk\n\nQuarto 에서는 내장된 [knitr 패키지](https://github.com/yihui/knitr)을 이용하여 R에서 작성한 코드를 실행하고 그 결과를 실시간으로 출력하여 문서에 삽입할 수 있다.\n\n### R chunk 생성하기\n\nR chunk 를 생성하는 방법은 위의 단추를 통해 생성하거나 ![r chunk](rchunk.png)\n\n혹은 다음과 같이 직접 타이핑하여 생성도 가능하다. ![chunk](chunk.png)\n\n### R chunk 옵션\n\n**.qmd** 문서에서 [**R**](https://www.r-project.org/) 코드가 들어가는 방식은 4가지이다.\n\n1.  몰래 실행. 코드와 결과는 다 숨긴다\n\n2.  실행. 코드와 결과를 모두 보여준다. - default\n\n3.  실행. 코드는 숨기고 결과만 보여준다.\n\n4.  실행하지 않음. 코드 보여주기만 한다.\n\n`include`, `echo`, `eval` 3가지 옵션으로 지정한다. \n- `eval=F` : 코드를 실행하지 않는다. \n- `echo=F` : 코드를 보여주지 않는다. \n- `include=F` : 실행 결과를 보여주지 않는다.\n\n코드 청크의 옵션은 YAML 에서 지정하여 문서 전체에 적용되게 할 수 있고, 각각 R 청크마다 `#|` 을 쳐서 각각 옵션을 변경할 수도 있다.\n\n#### 최초 설정\n\n문서를 처음 생성 시 옵션을 따로 지정하지 않으면 다음의 값으로 실행된다.\n\n```         \ninclude = TRUE \necho = TRUE \neval = TRUE \n```\n\n코드를 실행하고, 코드와 결과물 모두 문서에 보여준다.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Hello world\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello world\"\n```\n\n\n:::\n:::\n\n\n\n이를 잘 활용하여 R내에서 문서를 완성할 수 있다.\n\n생존곡선을 그릴 때를 생각해보자, 생존 곡선을 그릴 때는 먼저 survfit 함수를 통해 생존확률을 구해야 한다.\n\n이 때 survfit 함수는 결과를 보이지 않아도 되므로\n\n#### 실행하고 결과를 보이지 않기\n\n다음은 이 html을 생성할 때 쓴 quarto 문서의 캡처본으로\n![](surv.png)\n\n\n\n\n\n\n\n현재 강의 화면인 html 에는 코드 및 결과를 보이지 않는다. \n\n#### 실행하고 결과를 보여주기\n\n그러나 실행은 되었기 때문에 다음의 코드에서 fit3 에 대한 ggsurvplot 함수를 적용할 수 있었고\n코드 및 실행 후 결과는 다음과 같다. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsurv <- ggsurvplot(fit3, data = colon,\n  fun = \"cumhaz\", conf.int = F,\n  risk.table = F, risk.table.col=\"strata\",\n  ggtheme = theme_bw())\nggsurv\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n이렇게 시행하여 echo = False 옵션까지 적용하면 quarto 내에서 분석을 시행하고 그에 대한 문서작성을 한번에 할 수 있다.\n\n이외에도 코드 청크에 다음과 같은 옵션을 적용 가능하다.\n\n-   `message=F` - 실행 때 나오는 메세지를 보여주지 않는다.\n-   `warning=F` - 실행 때 나오는 경고를 보여주지 않는다.\n-   `error=T` - 에러가 있어도 실행하고 에러코드를 보여준다.\n-   `fig.height = 7` - 그림 높이, [**R**](https://www.r-project.org/)로 그린 그림에만 해당한다.\n-   `fig.width = 7` - 그림 너비, [**R**](https://www.r-project.org/)로 그린 그림에만 해당한다.\n-   `fig.align = 'center'` - 그림 위치, [**R**](https://www.r-project.org/)로 그린 그림에만 해당한다.\n\nr chunk 에 적용할 수 있는 전체 옵션은 `knitr::opts_chunk$get` 함수로 확인할 수 있다. \\`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$get()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$eval\n[1] TRUE\n\n$echo\n[1] TRUE\n\n$results\n[1] \"markup\"\n\n$tidy\n[1] FALSE\n\n$tidy.opts\nNULL\n\n$collapse\n[1] FALSE\n\n$prompt\n[1] FALSE\n\n$comment\n[1] NA\n\n$highlight\n[1] TRUE\n\n$size\n[1] \"normalsize\"\n\n$background\n[1] \"#F7F7F7\"\n\n$strip.white\n[1] TRUE\n\n$cache\n[1] FALSE\n\n$cache.path\n[1] \"index_cache/html/\"\n\n$cache.vars\nNULL\n\n$cache.lazy\n[1] TRUE\n\n$dependson\nNULL\n\n$autodep\n[1] FALSE\n\n$cache.rebuild\n[1] FALSE\n\n$fig.keep\n[1] \"high\"\n\n$fig.show\n[1] \"asis\"\n\n$fig.align\n[1] \"default\"\n\n$fig.path\n[1] \"index_files/figure-html/\"\n\n$dev\n[1] \"png\"\n\n$dev.args\nNULL\n\n$dpi\n[1] 96\n\n$fig.ext\nNULL\n\n$fig.width\n[1] 7\n\n$fig.height\n[1] 5\n\n$fig.env\n[1] \"figure\"\n\n$fig.cap\nNULL\n\n$fig.scap\nNULL\n\n$fig.lp\n[1] \"fig:\"\n\n$fig.subcap\nNULL\n\n$fig.pos\n[1] \"\"\n\n$out.width\nNULL\n\n$out.height\nNULL\n\n$out.extra\nNULL\n\n$fig.retina\n[1] 2\n\n$external\n[1] TRUE\n\n$sanitize\n[1] FALSE\n\n$interval\n[1] 1\n\n$aniopts\n[1] \"controls,loop\"\n\n$warning\n[1] FALSE\n\n$error\n[1] FALSE\n\n$message\n[1] FALSE\n\n$render\nNULL\n\n$ref.label\nNULL\n\n$child\nNULL\n\n$engine\n[1] \"R\"\n\n$split\n[1] FALSE\n\n$include\n[1] TRUE\n\n$purl\n[1] TRUE\n\n$fig.asp\nNULL\n\n$fenced.echo\n[1] FALSE\n\n$ft.shadow\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n다음은 필자가 논문을 quarto로 쓸 때 흔히 쓰는 디폴트 옵션이다.\n![ ](de.png)\n\n## Figures\n\n.qmd 문서에 그림이 들어가는 방법은 2가지가 있다.\n\n1.  [**R**](https://www.r-project.org/) 코드로 생성 : `plot` 함수, `ggplot2` 패키지 등\n\n2.  외부 그림 삽입\n\n앞서도 언급했듯이 주의할 점은 그림이 만들어지는 방법에 따라 **서로 다른 옵션**이 적용된다는 것이다. 일단 전자부터 살펴보자.\n\n### Figures with [**R**](https://www.r-project.org/)\n\n[**R**](https://www.r-project.org/) 코드에서 자체적으로 만든 그림은 전부 chunk 옵션의 지배를 받아 간단하다.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|fig-cap: \"scatterplot: cars\"\n#|fig-width: 8\n#|fig-height: 6\n\nplot(cars, pch = 18)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### External figures\n\n외부 그림은 [**R**](https://www.r-project.org/) 코드로도 삽입할 수 있고 [**마크다운**](https://gist.github.com/ihoneymon/652be052a0727ad59601) 문법을 쓸 수도 있는데, **어떤 방법을 쓰느냐에 따라 다른 옵션을 적용**받는다는 것을 주의해야 한다. [**R**](https://www.r-project.org/)에서는 `knitr::include_graphics` 함수를 이용하여 그림을 넣을 수 있고 이 때는 chunk 내부의 옵션이 적용된다.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(knitr)\ninclude_graphics(\"https://www.tidyverse.org/images/tidyverse-default.png\")\n```\n\n::: {.cell-output-display}\n![tidyverse logo](https://www.tidyverse.org/images/tidyverse-default.png){fig-align='center'}\n:::\n:::\n\n\n\n같은 그림을 chunk없이 바로 [**마크다운**](https://gist.github.com/ihoneymon/652be052a0727ad59601)에서 삽입할 수도 있다. 이 때는 `YAML`의 옵션이 적용된다.\n\n``` md\n![tidyverse logo](https://www.tidyverse.org/images/tidyverse-default.png){ width=50% }\n```\n\n![tidyverse logo](https://www.tidyverse.org/images/tidyverse-default.png){width=\"50%\"}\n\n`{ width=50% }` 는 그림의 크기를 조절하는 옵션이며 [**R**](https://www.r-project.org/) chunk에서도 같은 옵션 `out.width=\"50%\"`이 있다. 위치를 가운데로 조절하려면 `<center>...</center>` 를 포함시키자.\n\n``` md\n<center>\n![tidyverse logo](https://www.tidyverse.org/images/tidyverse-default.png){ width=50% }\n</center>\n```\n\n<center>\n\n![tidyverse logo](https://www.tidyverse.org/images/tidyverse-default.png){width=\"50%\"}\n\n</center>\n\n개인적으로는 외부 이미지도 chunk 내부에서 읽는 것을 추천한다. chunk 내부의 옵션들이 [**마크다운**](https://gist.github.com/ihoneymon/652be052a0727ad59601)의 그것보다 훨씬 체계적이고 쉬운 느낌이다.\n\n## Tables\n\n논문을 쓸 때 가장 귀찮은 부분 중 하나가 분석 결과를 테이블로 만드는 것으로, `knitr::kable()` 함수를 쓰면 문서 형태에 상관없이 Rmd에서 바로 테이블을 만들 수 있다. 아래는 데이터를 살펴보는 가장 간단한 예시이다.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|label: \"tables-mtcars\"\nknitr::kable(iris[1:5, ], caption = 'A caption', row.names = T)\n```\n\n::: {.cell-output-display}\n\n\nTable: A caption\n\n|   | Sepal.Length| Sepal.Width| Petal.Length| Petal.Width|Species |\n|:--|------------:|-----------:|------------:|-----------:|:-------|\n|1  |          5.1|         3.5|          1.4|         0.2|setosa  |\n|2  |          4.9|         3.0|          1.4|         0.2|setosa  |\n|3  |          4.7|         3.2|          1.3|         0.2|setosa  |\n|4  |          4.6|         3.1|          1.5|         0.2|setosa  |\n|5  |          5.0|         3.6|          1.4|         0.2|setosa  |\n\n\n:::\n:::\n\n\n\n**epiDisplay** 패키지의 `regress.display`, `logistic.display` 함수를 활용하면 회귀분석의 결과를 바로 테이블로 나타낼 수 있다.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|label: \"regtable\"\nmtcars$vs <- as.factor(mtcars$vs)\nmtcars$cyl <- as.factor(mtcars$cyl)\nmodel <- glm(mpg ~ disp + vs + cyl, data = mtcars)\nmodel.display <- epiDisplay::regress.display(model, crude = T, crude.p.value = T)\nmodel.table <- model.display$table[rownames(model.display$table)!=\"\", ]\nkable(model.table, caption = model.display$first.line)\n```\n\n::: {.cell-output-display}\n\n\nTable: Linear regression predicting mpg\n\n\n|                  |crude coeff.(95%CI)   |crude P value |adj. coeff.(95%CI)  |P(t-test) |P(F-test) |\n|:-----------------|:---------------------|:-------------|:-------------------|:---------|:---------|\n|disp (cont. var.) |-0.04 (-0.05,-0.03)   |< 0.001       |-0.03 (-0.05,0)     |0.019     |< 0.001   |\n|vs: 1 vs 0        |7.94 (4.6,11.28)      |< 0.001       |0.04 (-3.81,3.89)   |0.984     |0.334     |\n|cyl: ref.=4       |                      |              |                    |          |0.041     |\n|6                 |-6.92 (-10.11,-3.73)  |< 0.001       |-4.77 (-8.56,-0.98) |0.016     |          |\n|8                 |-11.56 (-14.22,-8.91) |< 0.001       |-4.75 (-12.19,2.7)  |0.202     |          |\n\n\n:::\n:::\n\n\n\n테이블을 좀 더 다듬으려면 [**kableExtra**](https://github.com/haozhu233/kableExtra) 패키지가 필요하며, 자세한 내용은 [**cran 설명서**](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html)[^10]를 참고하기 바란다. `html` 문서의 경우 `kable()`외에도 다양한 함수들을 이용할 수 있는데, 대표적인 것이 `rmarkdown::paged_table()` 함수와 [**DT**](https://github.com/rstudio/DT) 패키지이다. 전자는 아래와 같이 `YAML`에서 테이블 보기의 기본 옵션으로 설정할 수도 있다.\n\n[^10]: https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html\n\n``` yaml\n---\ntitle: \"Motor Trend Car Road Tests\"\noutput:\n  html_document:\n    df_print: paged\n---\n```\n\n[**DT**](https://github.com/rstudio/DT) 패키지에 대한 설명은 [Rstudio DT 홈페이지](https://rstudio.github.io/DT/)[^11]를 참고하기 바란다.\n\n[^11]: https://rstudio.github.io/DT/\n\n## 마치며\n\n본 강의를 통해 [**Quarto**](https://quarto.org/)으로 기본적인 문서를 만드는 법을 알아보았다. 본 강의에서는 시간 관계상 참고문헌 다는 법을 언급하지 않았는데 궁금하다면 [Bibliographies and Citations](https://pandoc.org/MANUAL.html#citations)[^12]을 참고하자.\n\n[^12]: https://pandoc.org/MANUAL.html#citations\n\n이 내용까지 숙지한다면 [**Quarto**](https://quarto.org/)으로 논문을 쓸 준비가 된 것이다. [**Quarto**](https://quarto.org/)에 대한 전반적인 내용은 아래의 [Quarto Cheet Sheet](https://rstudio.github.io/cheatsheets/quarto.pdf)[^13]에 잘 요약되어 있으니 그때그떄 확인하면 좋다.\n\n[^13]: https://rstudio.github.io/cheatsheets/quarto.pdf\n[^14]: https://bioinformatics.ccr.cancer.gov/docs/btep-coding-club/CC2024/Quarto/GettingStarted_with_Quarto_orig.html\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}