{
  "hash": "1617cbb7ac88c05ea00ee9ce360ee5cc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Rstudio에서 Copilot을 활용해 AI로 코딩하기\"\ndescription: | \n  Github 의 AI 서비스 Copilot을 Rstudio에 연동하여 자동 완성으로 코딩하는 방법을 소개합니다.\ncategories:\n  - R\n  - github\n  - rstudio\n  - copilot\nauthor:\n  name: \"Jinhwan Kim\"\n  email: jinhwan@zarathu.com\n  url: https://github.com/jhk0530\nimage: img/logo.png\nfig_width: 400\ndate: 2023-11-21\nformat: \n  html:\n    include-in-header:\n      - text: |\n          <link rel=\"canonical\" href=\"https://blog.zarathu.com/posts/2023-11-21-copilot/index.html\" />\nexecute:\n  freeze: true\ndraft: false\nlicense: CC BY-NC\n---\n\n\n# Rstudio에서 Copilot을 활용해 AI로 코딩하기\n\n## 1. Github Copilot이란?\n\n<p style=\"text-align: center;\">\n  <img src='img/copilot.png' width = '400px'>\n</p>\n\nGithub Copilot은 OpenAI의 GPT-3를 기반으로 만들어진 **AI 코딩 도우미**로, Github에 있는 수많은 \"Public Repository\"의 코드들을 학습하여, 자동 완성 형태의 제안을 통해 사용자의 코드 제작을 돕습니다.\n\nGithub에는 코드도 있지만, README와 같은 여러 종류의 설명 글 또한 있기 때문에 Copilot에서는 아래 이미지처럼 (`Quarto로 블로그 작성`) 다양한 종류의 자동 완성을 제공합니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/example.gif' width = '400px'>\n</p>\n\n## 2. chatGPT와의 차이점\n\n<a href='https://support.microsoft.com/ko-kr/topic/chatgpt-vs-microsoft-365-copilot-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94-8fdec864-72b1-46e1-afcb-8c12280d712f' target = \"_blank\">Microsoft의 설명</a>에 따르면 chatGPT는 **자연어 처리 기술**로, Microsoft 365 Copilot은 **코드 생성 기술**로 설명하고 있습니다. (Microsoft 365 copilot과 github copilot은 살짝 다르긴합니다.)\n\n즉, chatGPT는 자연어 처리 기술을 통해 사용자의 **질문에 대한 답변**을 생성하는 것이 주 역할입니다.\n\n따라서 chatGPT는 아래 작업 용도로 활용되기도 합니다.\n\n- 에세이, 이메일 및 커버 레터 작성\n- 목록 만들기\n- 예술에 대해 자세히 설명\n- 코드 작성\n- 콘텐츠 요약\n- 시와 노래 가사 만들기\n- 이력서 작성\n\n한편 Copilot은 Github에서의 학습을 바탕으로 **코드 스니펫**을 제공하는 것에 더 큰 장점을 가지고 있습니다.\n\n코드 스니펫이란 아래 이미지처럼 자주 사용되는 **조각 코드**를 미리 작성해 놓은 것을 말합니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/snippet.png'  width = '400px'>\n</p>\n\n얼핏보면 큰 차이가 없어보이지만, chatGPT는 최근의 기술은 잘 반영하지 못한다는 단점이 있습니다.\n또한 Copilot은 IDE (Rstudio)에서 바로 사용할 수 있다는 장점도 있습니다.\n\n어느 것이 좋다/나쁘다 라기보단 서로 다른 특징을 가지고 있기에, 두 방법 모두를 필요한 목적에 따라 적절히 활용하는 것을 권장합니다.\n\n## 3. Github Copilot을 사용하기 위한 준비\n\nCopilot을 사용하기 위해서는 몇가지 준비가 필요합니다.\n\n::: {.callout-warning appearance=\"simple\"}\n이 글에서는 Github 에서의 Copilot 결제를 비롯한 요금제에 대해서는 설명하지 않습니다. \n:::\n\n1. Github 개인 계정 (무료)\n2. IDE (코드 에디터) - VS Code, **Rstudio** 등. 글에서는 Rstudio를 기준으로 설명\n3. Github Copilot 가입 (첫 한달은 무료, 이후 **월 10달러의 유료**, <a  href='https://docs.github.com/en/copilot/overview-of-github-copilot/about-github-copilot-individual#understanding-the-differences-between-copilot-individual-and-copilot-business' target = '_blank'> Pricing </a> 참조)\n\nCopilot의 공식 홈페이지에서 설명이 제공하는 개발 도구는 Azure Data studio, JetBrains IDEs, Vim/NeoVim, Visual Studio, Visual Studio Code가 있지만 다행히 Rstudio에서도 사용가능합니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/ide.png' width = '400px'>\n</p>\n\n::: {.callout-note appearance=\"simple\"}\n현재는 Rstudio Desktop 2023.09.0 이상 버전에서만 사용 가능하며 Rstudio Server나 Posit Workbench에서는 관리자 설정 이후 사용 가능합니다.\n\n버전을 확인하기 위해서는 Rstudio에서 `Help > About Rstudio`를 클릭하면 됩니다.\n:::\n\n## 4. Rstudio에서 Github Copilot 사용 설정\n\n이후 Copilot 설정 과정은 다음과 같습니다.\n\n1. Rstudio에서 `Tools > Global Options > copilot`을 클릭합니다.\n\n\n<p style=\"text-align: center;\">\n  <img src='img/setting1.png' width = '400px'>\n</p>\n\n\n2. \"Enable Github Copilot\"을 체크합니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/setting2.png' width = '400px'>\n</p>\n\n\n3. \"Sign in\"을 클릭합니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/setting3.png' width = '400px'>\n</p>\n\n\n4. 이후 나타나는 Device Activation에 Rstudio에서 보여지는 코드를 입력합니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/setting4.png' width = '400px'>\n</p>\n\n\n5. 이제 Github Copilot을 사용할 수 있습니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/setting5.png' width = '400px'>\n</p>\n\n\n## 5. Github Copilot 사용하기\n\nCopilot은 `\"Ghost text\"`라고 불리는 방법으로 사용자의 코드를 자동 완성합니다.\n\n앞서 본 gif 이미지나, 아래의 예시처럼 코드의 일정 부분을 작성하면 나머지 부분을 회색으로 보여주어\n탭 키를 누르는 것으로 완성할 수 있습니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/copilot-rstudio.png' width = '400px'>\n</p>\n\n1. Copilot이 인지할 코드: 이때 꼭 주석으로 하지 않아도 이전 코드를 기반으로 copilot이 자동으로 제안합니다.\n2. Copilot이 제안하는 코드: 회색으로 보여지는 부분이 제안되는 부분입니다.\n3. Copilot 상태바: `Waiting for Completions`(대기), `Completion response received`(코드 제안 완료), `No completions available`(제안 없음) 등의 상태를 보여줍니다.\n\n한편 상태바 옆의 언어 설정을 통해 어떤 코드를 자동생성할지 설정할 수 있습니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/language.png' width = '400px'>\n</p>\n\n추가로 Copilot 옵션에서 Index project files... 를 선택하여 현재 Rstudio 프로젝트의 파일을 코드제안에 반영할 수도 있습니다. \n\n### 사용 방법 1: Code\n\nCopilot을 사용하는 가장 기본적인 방법은 코드를 자동완성하는 것입니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/code.png' width = '400px'>\n</p>\n\n위의 예시처럼, 함수의 기능을 잘 설명하는 이름을 작성하는 것으로 Copilot은 함수의 목적을 이해하고, 함수의 기능에 맞는 코드를 제안합니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/code2.png' width = '400px'>\n</p>\n\n한편 함수 이름에 기능을 명시하지 않고 적절한 **한글 주석을 통해서도** 함수를 자동으로 완성할 수 있습니다.\n\n물론 이를 위해서는 (이름으로나 주석으로나) 함수의 목적을 명확하게 알아야만 합니다.\n\n### 사용 방법 2: Questions\n\nCopilot은 코드를 자동완성하는 것 외에도, 코드를 작성하는데 도움을 주는 질문을 제안합니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/question.png' width = '400px'>\n</p>\n\n이때 질문을 위해서는 코드와는 다르게 주석에 `q:`와 `a:`형식을 맞춰야만 합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# q: QUESTION\n# a: \n```\n:::\n\n\n개인적으로 이러한 방법의 활용을 위해서는 코드를 위주로 학습한 Copilot보다는, `chatGPT`를 바로 쓰거나 `gptStudio`, `chattr` 패키지를 사용해 LLM 모델을 사용하는 것도 좋다고 생각합니다.\n\n::: {.callout-note appearance=\"simple\"}\n\n<a href='https://medium.com/@jhk0530/chatgpt-in-rstudio-with-gptstudio-5125f8eac429' target = \"_blank\"> gptStudio 설명글 </a>\n\n<a href='https://mlverse.github.io/chattr/' target = \"_blank\"> chattr 패키지 웹페이지</a>\n\n:::\n\n### 사용 방법 3: Comments\n\nCopilot은 코드를 작성하는데 도움을 주는 질문 외에도, 주석을 작성하는데에도 쓰일 수 있습니다.\n\n예를 들면, 아래의 표준 편차를 계산하는 함수에 대해 주석을 작성하게 할 수도 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_se <- function(x, na.rm = TRUE) {\n  if (!is.numeric(x)) {\n    stop(\"x must be numeric\")\n  }\n  if (na.rm) {\n    x <- x[!is.na(x)]\n  }\n  sqrt(var(x) / length(x))\n}\n\ncalc_se(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9574271\n```\n\n\n:::\n:::\n\n\n<p style=\"text-align: center;\">\n  <img src='img/comment.png' width = '400px'>\n</p>\n\n### 사용 방법 4: Test\n\nCopilot은 코드를 작성하는데 도움을 주는 질문 외에도, 코드의 품질을 올리기 위한 목적의 테스트 코드를 작성하기 위해서도(!) 쓰일 수 있습니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/test.gif' width = '400px'>\n</p>\n\n## 6. 정리\n\n당연한 이야기지만, Copilot은 유용한 코드를 생성하는 경우가 많지만 항상 유효하거나 의도한 문제를 정확하게 해결하지 않을 수도 있습니다.\n\n또한 Github의 다양한 수준의 코드를 학습한 만큼 안전하지 않은 코딩 패턴이나, 버그, 비효율적인 관행등을 포함한 코드를 만들 수 도 있기 때문에 완전히 신뢰할 수는 없습니다.\n\n그러나 대부분의 R 사용자에게는 크게 체감될만한 문제가 없을 것으로 보이며, 특히 데이터 매니지먼트의 목적으로는 매우 유용하게 사용할 수 있을 것으로 보입니다.\n\n꼭 Rstudio가 아니더라도 다른 IDE에서 SQL, SASS 등의 다른 언어를 목적으로도 사용할 수 있기에 Copilot은 대체로 코드 작업에 아주 아주 효과적인 방법입니다. \n\n그러나 개인 기준 월 10달러의 비용이 들기 때문에, 코딩 작업이 많이 필요하지 않은 사람에게는 다소 부담스러울 수도 있으니 무료 기간동안 활용해보고 결정하는 것도 좋을 것 같습니다.\n\n*비교를 위한 넷플릭스의 요금제*\n\n<p style=\"text-align: center;\">\n  <img src='img/netflix.png' width = '400px'>\n</p>\n\n::: {.callout-note appearance=\"simple\"}\n## 🤗 Let's talk \n\n차라투에서는 R과 Shiny에 대한 컨설팅을 제공합니다. 진행중인 프로젝트 관련하여 도움이 필요하시다면 jinhwan@zarathu.com 으로 알려주세요! \n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}