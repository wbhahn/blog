{
  "hash": "75fca5baf4c0a3d620e90f139fd0bd6b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R의 officer 패키지를 활용하여 PPT 편집을 위한 벡터 그래픽스 만들기\"\ndescription: | \n  R을 활용하여 만든 이미지를 PowerPoint에서 편집할 수 있도록, 벡터 그래픽을 만드는 법을 소개합니다. \ncategories:\n  - R\n  - officer\n  - vectorgraphics\n  - ggplot2\n  - powerpoint\n  - visualization\naliases:\n  - officer.html\nauthor:\n  name: \"Jinhwan Kim\"\n  email: jinhwan@zarathu.com\n  url: https://github.com/jhk0530\nimage: img/wacom.gif\nfig_width: 400\ndate: 2023-07-01\nformat: html\nexecute:\n  freeze: true\ndraft: false\nlicense: CC BY-NC\n---\n\n\n# 개요\n\n이번 글에서는 R 패키지 `officer`를 사용하여 PPT 프레젠테이션에 벡터 그래픽을 만드는 과정에 대해 소개합니다.\nofficer를 포함하여 몇몇 패키지들이 **officeverse**라고 불리는 생태계를 구성하고 있으며 PPT외에도 엑셀이나 워드로 R의 결과를 만들어 낼 수 있습니다만, 이번 글에서는 벡터 그래픽을 저장하는 목적으로의 `officer`에 한정합니다. \n\n# 벡터 그래픽스\n\n<p style=\"text-align: center;\">\n  <img src='img/VectorBitmapExample_kor.png' text-align ='center'></img>    \n</p>\n\n<a href ='https://ko.wikipedia.org/wiki/벡터_그래픽스' target = '_blank'> 위키피디아</a>의 설명에 따르면, \n**벡터 그래픽스** (Vector Graphics)는 이미지를 보여줄 때 수학 방정식을 기반으로 \n점, 직선, 곡선 등의 물체를 활용하는 것을 의미합니다. \n(많이 쓰이는 `Pixel` 기반의 **래스터 그래픽스**의 대안이기도 합니다.)\n\n예시처럼 벡터 그래픽스를 사용하면 이미지를 확대했을때 해상도가 망가지지 않거나, 이미지의 수정이 가능해진다는 장점이 있습니다. \n\n# 사례\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nplotObj <- iris |>\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +\n  geom_point()\n\nplotObj # 이미지 저장을 위한 코드\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n위와 같은 코드로, 그림을 만들고 이를 외부로 저장하려는 상황을 생각해보겠습니다.\n\n이를 위해 일반적으로 우리가 할 수 있는 것은 Rstudio의 **Plot** (혹은 **View**)에서 이미지를 저장하는 것입니다.\n\n:::{.columns style=\"text-align: center;\"}\n::::{.column}\n<figure>\n  <img src='img/officer1.png' width = '100%'></img>\n</figure>\n::::\n\n::::{.column}\n<figure>\n  <img src='img/officer2.png' width = '100%' style = 'margin-left: 1em'></img>\n</figure>\n::::\n:::\n\n하지만, 이렇게 png형태로 이미지를 저장하고 나면, 확대를 했을때 꺠지거나, 다른 편집이 **거의 불가능**합니다.\n\n<p style=\"text-align: center;\">\n  <img src='img/Rplot2.png' width = '500px'></img>\n</p>\n\n그러나 `officer`를 통해 벡터 그래픽으로 이미지를 저장한다면, 다음 예시처럼 파워포인트를 통해 세밀한 편집이 가능합니다.\n\n:::{.columns style=\"text-align: center;\"}\n::::{.column}\n<figure>\n  <img src='img/Rplot3.png' width = '100%'></img>\n</figure>\n::::\n\n::::{.column}\n<figure>\n  <img src='img/Rplot4.png' width = '100%' style = 'margin-left: 1em'></img>\n</figure>\n::::\n:::\n\n# 설치와 설정\n\n`officer` 패키지의 설치는 아래의 코드로 가능합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remotes::install_github('davidgohel/officer/')\n# remotes::install_github('davidgohel/rvg')\nlibrary(officer) # office + R\nlibrary(rvg) # r vector graphics\n```\n:::\n\n\n# officer 사용\n\n`officer`로 벡터그래픽을 만드는 흐름은 크게 4가지 순서로 구성됩니다.\n\n1. ppt 오브젝트를 만든다.\n2. ppt 오브젝트에 슬라이드를 만들고 \n3. 그 안에 이미지를 vector graphics로 넣는다.\n4. ppt 오브젝트를 저장한다.\n\n이제 각각의 내용을 소개하겠습니다.\n\n## 1. 오브젝트 만들기\n \n\n::: {.cell}\n\n```{.r .cell-code}\nppt <- read_pptx()\n\nprint(ppt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npptx document with 0 slide(s)\nAvailable layouts and their associated master(s) are:\n             layout       master\n1       Title Slide Office Theme\n2 Title and Content Office Theme\n3    Section Header Office Theme\n4       Two Content Office Theme\n5        Comparison Office Theme\n6        Title Only Office Theme\n7             Blank Office Theme\n```\n\n\n:::\n:::\n\n\n`read_pptx`는 원래 ppt 파일을 R 오브젝트 형태로 읽기 위한 함수이지만, \n만약 함수에 파일을 입력하지 않으면 새로운 ppt 오브젝트를 생성합니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppt <- read_pptx(\"mypptx.pptx\") # 기존 ppt 읽기 \nppt <- read_pptx() # 새로운 ppt 생성\n```\n:::\n\n\n한편 `officer`에는 `read_pptx` 외에도 `read_docx`(워드), `read_xlsx`(엑셀)도 존재합니다.\n\nppt 오브젝트를 콘솔에 입력하면, 몇개의 슬라이드로 구성되어있는지 확인할 수 있습니다. (`layout`과 `master`는 신경쓰지 않으셔도 좋습니다.)\n\n## 2. 슬라이드 만들기\n\n처음 만든 ppt 오브젝트에는 **pptx document with 0 slide(s)**, 즉 슬라이드가 없습니다.\n\n이 오브젝트에 슬라이드를 추가하는 것은 `add_slide()`로 할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppt |>\n  add_slide() # ppt <- ppt |> add_slide() 로 안해도 됨\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npptx document with 1 slide(s)\nAvailable layouts and their associated master(s) are:\n             layout       master\n1       Title Slide Office Theme\n2 Title and Content Office Theme\n3    Section Header Office Theme\n4       Two Content Office Theme\n5        Comparison Office Theme\n6        Title Only Office Theme\n7             Blank Office Theme\n```\n\n\n:::\n\n```{.r .cell-code}\nppt # pptx document with 1 slide(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npptx document with 1 slide(s)\nAvailable layouts and their associated master(s) are:\n             layout       master\n1       Title Slide Office Theme\n2 Title and Content Office Theme\n3    Section Header Office Theme\n4       Two Content Office Theme\n5        Comparison Office Theme\n6        Title Only Office Theme\n7             Blank Office Theme\n```\n\n\n:::\n:::\n\n\n`add_slide()`에는 layout과 master라는 옵션을 지정할 수 있고 가능한 값은 다음과 같습니다.\n\n- Title Slide\n- **Title and Content (기본값)**\n- Section Header\n- Two Content\n- Comparison\n- Title Only\n- Blank\n\n아마 눈치 채셨을 수도 있겠지만 레이아웃은 \n콘솔에서 ppt 오브젝트를 확인할 때 나오는 것들이며,\n\n우리의 목적은 **슬라이드 구성이 아닌 이미지 저장**이기 때문에 \n어떤 값을 선택해도 동일한 결과를 얻을 수 있습니다.\n\n아래의 이미지는 각 옵션들을 적용하여 만든 슬라이드의 결과물로 모두 동일한 것을 알 수 있습니다. \n\n<p style=\"text-align: center;\">\n  <img src='img/layout.png' width = '500px'></img>\n</p>\n\n## 3. 벡터 그래픽스 슬라이드에 추가\n\n앞서 만든 ggplot의 결과를 `ph_with`이라는 함수로 슬라이드에 추가할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppt |> ph_with( # paragraph의 ph가 아닐까 생각\n  dml(ggobj = plotObj), # 앞에서 만들었던 ggplot 이미지 오브젝트\n  location = ph_location_fullsize() # 쉬운 편집을 위해 이미지의 크기를 슬라이드에 가득 채움\n)\n```\n:::\n\n\n여기서 `dml`은 <a href ='http://officeopenxml.com/drwOverview.php' target = \"_blank\">`DrawingML`</a>이라는 오피스 프로덕트(pptx)에 X**ML**로 이미지를 만들기 위한 내용입니다. location에는 다른 옵션도 있지만 **ph_location_fullsize**를 권장합니다\n\n만약 여러개의 이미지를 여러장의 슬라이드로 집어넣어 만들고 싶다면 다음처럼 `ph_with`를 pipe (`|>`)로 이어서 사용 할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nppt |> \n  add_slide() |> # 1번째 슬라이드 \n  ph_with(\n    dml(ggobj = plotObj),\n    location = ph_location_fullsize()\n  ) |>\n  add_slide() |> # 2번째 슬라이드\n  ph_with( \n    dml(ggobj = plotObj2),\n    location = ph_location_fullsize()\n  ) |>\n  add_slide() |> # 3번째 슬라이드 \n  ph_with( \n    dml(ggobj = plotObj3),\n    location = ph_location_fullsize()\n  )\n```\n:::\n\n\n## 4. ppt 저장\n\n마지막으로 `add_slide`와 `ph_with`를 통해 만든 슬라이드는 `print`로 \n현재 작업중인 디렉토리에 (`getwd()`로 확인) 저장할 수 있습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd() # ppt가 저장되는 위치\nppt |> \n  print(target = \"myPrint.pptx\")\n```\n:::\n\n\n이렇게 만들어진 pptx는 **파워포인트**와 **키노트**, 그리고 **구글 슬라이드**에서 작업할 수 있습니다.\n\n## 정리\n\n위 4개의 단계를 1개의 코드로 연결하면 다음과 같습니다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(officer)\nlibrary(rvg)\nlibrary(ggplot2)\n\n# 이미지 생성\nplotObj <- iris |>\n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +\n  geom_point()\n\n# ppt\n\nread_pptx() |> # ppt 생성, 별도의 오브젝트로 저장하지 않아도 됨.\nadd_slide() |> # 슬라이드 추가\n  ph_with( # 이미지 추가\n    dml(ggobj = plotObj), \n    location = ph_location_fullsize() \n  ) |>\nprint('image.pptx') # ppt 저장 \n```\n:::\n\n\n한편, `officer`를 활용하여 더 자세한 ppt 생성과 편집도 가능하지만, 이 글에서는 다루지 않으며 \n`quarto`를 활용한 `revealjs` 슬라이드 생성하는 방법을 <a href='https://education.zarathu.com/day3/quartopres.html' target ='_blank'>링크</a>로 대신 첨부해드립니다.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}