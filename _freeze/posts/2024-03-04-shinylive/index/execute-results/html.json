{
  "hash": "c03b900a8f15665b1a96f79831794ec1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"shinylive 를 활용한 quarto 블로그에 shiny 추가 방법\"\ndescription: | \n  webR의 개선 버전인 shinylive 패키지를 사용하여 정적 페이지에 shiny application 추가하기\ncategories:\n  - R\n  - shiny\n  - githubpage\n  - documentation\n  - website\n  - quarto\nauthor:\n  name: \"Jinhwan Kim\"\n  email: jinhwan@zarathu.com\n  url: https://github.com/jhk0530\nimage: img/logo.png\nfig_width: 400\ndate: 2024-03-05\nformat: html\nexecute:\n  freeze: true\ndraft: false\nlicense: CC BY-NC\nfilters: \n  - shinylive\n---\n\n\n## Review wasm \n\n이전에 작성한 <a href='https://blog.zarathu.com/posts/2023-09-10-wasm2/' target = \"_blank\">글</a>에서 별도의 서버 없이 작동하는 정적 페이지에서 어떻게 shiny application을 사용할 수 있는 방법을 소개한 적 있다.\n\n이 방법의 핵심은 **wasm**이라는 기술로, 웹 브라우저에서 사용할 수 있게 변환 된 R과 Shiny 관련 라이브러리, 파일들을 불러오고 이를 활용하는 방법이었는데, wasm의 가장 큰 문제는 R 개발자들에게도 환경 설정 자체가 어렵다는 것이었다. \n\n다행히 몇개월 정도의 시간이 지나고 이 환경 설정을 해결해주는 R 패키지가 나왔고, 이를 활용하여 정적 페이지에 shiny application을 추가하는 방법을 소개하고자 한다.\n\n## shinylive\n\nshinylive는 <a href='https://github.com/posit-dev/py-shinylive' target = \"_blank\">python 버전</a>과 <a href='https://github.com/posit-dev/r-shinylive' target = \"_blank\">r 버전</a>이 있으며, 이 글에서는 r 버전을 기준으로 소개한다. \n\nshinylive는 웹 페이지 생성에 필요한 HTML, Javscript, CSS 등의 요소와 shiny 를 사용하기 위한 wasm 관련 파일들을 생성하는 일을 한다. \n\n\nshinylive로 만든 예시는 <a href='https://shinylive.io/r/examples/' target = '_blank'>이 링크</a>에서 확인할 수 있다.\n\n<img src='img/shinylive.png' width = '100%'>\n\n### shinylive 설치\n\nshinylive는 CRAN에 올라가 있기도 하지만 최근 릴리즈 된 버전이 0.1.1인만큼 수시로 업데이트 될 수 있어 github의 최신 버전을  사용하는 것을 권장한다. 추가로 `pak`는 최근 posit에서 R 패키지를 설치하기 위해 권장하는 R 패키지로, 기존의 `install.packages()`, `remotes::install_github()` 등의 함수를 대체할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"pak\")\npak::pak(\"posit-dev/r-shinylive\")\n```\n:::\n\n\n:::{.callout-tip appearnce='simple'}\n## Version\n통상적으로 1.0 이전의 버전은 아직 개발 중인 버전이라고 생각해도 좋다.\n:::\n\n\n### shinylive 사용방법\n\nshinylive는 기존에 만든 shiny application에 wasm을 추가하는 것으로 생각할 수 있다. 즉, 먼저 shiny application을 만들어야 한다.\n\n예시 실습을 위해 shiny에서 기본으로 제공하는 코드를 사용한다.(이는 Rstudio 콘솔에서 `shiny::runExample(\"01_hello\")`를 입력해서 확인할 수도 있다.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n\nui <- fluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\n        inputId = \"bins\",\n        label = \"Number of bins:\",\n        min = 1,\n        max = 50,\n        value = 30\n      )\n    ),\n    mainPanel(\n      plotOutput(outputId = \"distPlot\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  output$distPlot <- renderPlot({\n    x <- faithful$waiting\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n    hist(x,\n      breaks = bins, col = \"#75AADB\", border = \"white\",\n      xlab = \"Waiting time to next eruption (in mins)\",\n      main = \"Histogram of waiting times\"\n    )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n이 코드는 아래 그림과 같이 사용자의 입력에 반응하여 갯수만큼 histogram을 만드는 간단한 shiny application을 만들어 낸다. \n\n<img src='img/hello.png' width = '100%'>\n\n이 코드를 shinylive를 사용해 정적인 페이지를 만드는 방법은 2가지가 있는데 하나는 별도의 웹페이지로 만들어내는 것이고, 다른 하나는 이 기술 블로그 같은 quarto 블로그 페이지에 내부 콘텐츠로 심는 것이다.\n\n먼저 별도의 웹페이지를 만드는 방법은 다음과 같다.\n\n## shinylive via Web page\n\n별도의 정적 웹페이지에서 shiny를 제공하려면, 이전에 설치했던 shinylive 패키지를 사용하여 app.R을 웹페이지로 변환하는 과정이 필요하다. \n\n내 문서(Documents)의 shinylive라는 폴더를 만들고 이 안에 app.R을 저장했을 때를 기준으로, `export` 함수의 사용 예시는 다음과 같다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(shinylive)\nshinylive::export('~/Documents/shinylive', '~/Documents/shinylive_out')\n```\n:::\n\n\n이 코드를 실행하면 shinylive와 동일한 위치, 즉 내 문서(Documents)에 shinylive_out이라는 폴더를 새롭게 만들고 그 안에 shinylive 패키지를 사용해 변환된 wasm 버전의 shiny 코드를 생성한다.\n\n이 shinylive_out 폴더의 내용물을 확인해보면 다음과 같으며 이전 글에서 언급했던 webr, serviceworker 등이 포함되어 있는 것을 확인할 수 있다. \n\n<img src='img/out.png' width = '100%'>\n\n조금 더 구체적으로 `export` 함수는 현재 R studio를 실행하고 있는 로컬 PC에서 shinylive 패키지의 파일들, 즉 shiny와 관련된 라이브러리 파일들을 out 디렉토리에 추가하는 역할을 한다.\n\n<img src='img/console.png' width = '100%'>\n\n이제 이 폴더의 내용물을 기준으로 github page등을 만들면 shiny 를 제공하는 정적인 웹페이지를 제공할 수 있으며 그 결과는 아래의 명령어를 통해 미리 확인해 볼 수 있다. \n\n:::{.callout-tip appearnce='simple'}\n## github page\n깃허브 페이지 배포를 위해서는 이전에 작성했던 <a href='https://blog.zarathu.com/posts/2023-03-17-pkgdown/#%EC%9B%B9%EC%82%AC%EC%9D%B4%ED%8A%B8-%EB%B9%8C%EB%93%9C-%EB%B0%B0%ED%8F%AC' target = \"_blank\"> pkgdown의 글 </a>을 참고하길 권장하며, 이를 위해 shinylive_out 대신 docs 폴더로 결과를 내보내길 권장한다. \n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhttpuv::runStaticServer(\"~/Documents/shinylive_out\")\n```\n:::\n\n\n## shinylive in Quarto \n\nquarto 블로그에 shiny application을 추가하기 위해서는 별도의 extension을 사용해야한다. quarto extension은 quarto의 기능을 확장하는 별도의 패키지로, 기본 R에 R 패키지를 사용해 기능을 추가하는 것과 유사하다. \n\n먼저 Rstudio의 터미널에서 다음 코드를 실행하여 quarto extenstion을 추가해야 한다. \n\n```bash\nquarto add quarto-ext/shinylive\n```\n\nquarto 블로그에 shiny 를 심기 위해서 별도의 파일을 만들 필요는 없으며, `{shinylive-r}`이라는 코드 블록을 사용한다. 추가로 index.qmd의 yaml에 shinylive 를 설정해야만 한다.\n\n```yaml\nfilters: \n  - shinylive\n```\n\n이후 `shinylive-r` 블록에 앞서 만든 app.R 의 내용을 작성한다. \n\n```{{shinylive-r}}\n#| standalone: true\n#| viewerHeight: 800\n\nlibrary(shiny)\n\nui <- fluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\n        inputId = \"bins\",\n        label = \"Number of bins:\",\n        min = 1,\n        max = 50,\n        value = 30\n      )\n    ),\n    mainPanel(\n      plotOutput(outputId = \"distPlot\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  output$distPlot <- renderPlot({\n    x <- faithful$waiting\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n    hist(x,\n         breaks = bins, col = \"#75AADB\", border = \"white\",\n         xlab = \"Waiting time to next eruption (in mins)\",\n         main = \"Histogram of waiting times\"\n    )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n아래는 실제 코드 블록이 어플리케이션으로 실행되는 결과이며 slider를 움직일때 반응하여 histogram을 그리는 것을 확인할 수 있다.\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 800\n\nlibrary(shiny)\n\nui <- fluidPage(\n  titlePanel(\"Hello Shiny!\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\n        inputId = \"bins\",\n        label = \"Number of bins:\",\n        min = 1,\n        max = 50,\n        value = 30\n      )\n    ),\n    mainPanel(\n      plotOutput(outputId = \"distPlot\")\n    )\n  )\n)\n\nserver <- function(input, output) {\n  output$distPlot <- renderPlot({\n    x <- faithful$waiting\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n    hist(x,\n         breaks = bins, col = \"#75AADB\", border = \"white\",\n         xlab = \"Waiting time to next eruption (in mins)\",\n         main = \"Histogram of waiting times\"\n    )\n  })\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n## 정리\n\nshinylive는 wasm을 활용해 깃허브 페이지 또는 quarto 블로그 같은 정적 페이지에서 shiny를 실행할 수 있게 하는 기능으로 각각 R 패키지와 quarto extension을 통해 사용할 수 있다.\n\n물론 아직 나온지 1년이 되지 않은 기능인만큼 모든 기능이 제공되는 것은 아니며  정적 페이지를 사용하는 만큼 별도의 shiny server를 활용하는 것에 비하면 단점이 있기도 하다. \n\n그러나 shiny 사용법이나 간단한 통계 분석을 소개하고, 이를 웹사이트에서 별도의 R 설치 없이도 바로 실습할 수 있다는 점에서 많이 사용되고 있으며 앞으로도 더 많은 기능이 추가될 것으로 기대된다.\n\n이 블로그에 사용한 코드는 <a href='https://github.com/zarathucorp/blog/blob/master/posts/2024-03-04-shinylive/index.qmd' target = \"_blank\">링크</a>에서 확인할 수 있다. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}